apiVersion: tekton.dev/v1alpha1
kind: ClusterTask
metadata:
  annotations:
    manifestival: new
  selfLink: /apis/tekton.dev/v1alpha1/clustertasks/buildah
  resourceVersion: '394613'
  name: buildah
  uid: 308a245c-17ea-4556-a4c4-a71005960560
  creationTimestamp: '2020-05-20T16:57:30Z'
  generation: 5
  ownerReferences:
    - apiVersion: operator.tekton.dev/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: Config
      name: cluster
      uid: a798b9fb-09e7-4d91-b555-82a4fbd384ca
  labels:
    operator.tekton.dev/provider-type: community
spec:
  params:
    - default: registry.redhat.io/rhel8/buildah
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: oci
      description: 'The format of the built container, oci or docker'
      name: FORMAT
      type: string
    - default: INSERT_YOUR_IBM_CLOUD_ORGANIZATION_HERE
      description: IBM_CLOUD_ORGANIZATION
      name: IBM_CLOUD_ORGANIZATION
      type: string
    - default: INSERT_YOUR_IBM_CLOUD_SPACE_HERE
      description: IBM_CLOUD_SPACE
      name: IBM_CLOUD_SPACE
      type: string
    - default: INSERT_YOUR_IBM_CLOUD_API_KEY_HERE
      description: IBM_CLOUD_API_KEY
      name: IBM_CLOUD_API_KEY
      type: string
  resources:
    inputs:
      - name: source
        type: git
    outputs:
      - name: image
        type: image
  steps:
    - command:
        - buildah
        - bud
        - '--format=$(params.FORMAT)'
        - '--tls-verify=$(params.TLSVERIFY)'
        - '--layers'
        - '--storage-driver=vfs'
        - '-f'
        - $(params.DOCKERFILE)
        - '-t'
        - $(resources.outputs.image.url)
        - $(params.CONTEXT)
      image: $(params.BUILDER_IMAGE)
      name: build
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
    - command:
        - buildah
        - push
        - '--storage-driver=vfs'
        - '--tls-verify=$(params.TLSVERIFY)'
        - $(resources.outputs.image.url)
        - 'docker://$(resources.outputs.image.url)'
      image: $(params.BUILDER_IMAGE)
      name: push
      resources: {}
      securityContext:
        privileged: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: /workspace/source
  volumes:
    - emptyDir: {}
      name: varlibcontainers

